name: $(TeamProject)_$(Build.DefinitionName)_$(Build.BuildId)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

# Cli Version: 1.3.5

trigger:
  batch: true
  branches:
    include:
    - master

pr:
  - master

pool:
  name: Default

parameters:
  - name: Tag
    default: '1.0.0'

variables:  
  BuildConfiguration: 'Release'
  ArtifactStagingDirectory: '$(Build.ArtifactStagingDirectory)'
  ArtifactName: 'drop'
 
stages:
  - stage: build
    displayName: Build and test
    jobs:
      - job: run_tests
        displayName: Run tests
        steps:
          - task: UseDotNet@2
            displayName: 'Set .NET Core to 3.1'
            inputs:
              packageType: sdk
              version: 3.1.x
              installationPath: $(Agent.ToolsDirectory)/dotnet
          - task: DotNetCoreCLI@2
            displayName: 'dotnet test'
            inputs:
              command: test
              projects: '**/Xabe.FFmpeg.Test.csproj'
              arguments: '-c ${{ variables.BuildConfiguration }} -v=normal'
              publishTestResults: true  
      - job: run_downloader_tests
        displayName: Run downloader tests
        steps:
          - task: UseDotNet@2
            displayName: 'Set .NET Core to 3.1'
            inputs:
              packageType: sdk
              version: 3.1.x
              installationPath: $(Agent.ToolsDirectory)/dotnet
          - task: DotNetCoreCLI@2
            displayName: 'dotnet test'
            inputs:
              command: test
              projects: '**/Xabe.FFmpeg.Downloader.Test.csproj'
              arguments: '-c ${{ variables.BuildConfiguration }} -v=normal'
              publishTestResults: true
      - job: build_artifacts
        displayName: Build artifacts
        steps:
          - task: UseDotNet@2
            displayName: 'Set .NET Core to 3.1'
            inputs:
              packageType: sdk
              version: 3.1.x
              installationPath: $(Agent.ToolsDirectory)/dotnet
          - powershell: |
              dotnet clean -c ${{ variables.BuildConfiguration }}
              if (${{ parameters.Tag }}) {
                dotnet build -c ${{ variables.BuildConfiguration }} -p:Version=${{ parameters.Tag }} /p:GenerateDocumentationFile=true
              } else {
                dotnet build /p:GenerateDocumentationFile=true
              }
            failOnStderr: true
            workingDirectory: ./src/Xabe.FFmpeg
            displayName: 'Dotnet build'
          - powershell: |
              ls
              if (${{ parameters.Tag }}) {
                dotnet pack --no-build -c ${{ variables.BuildConfiguration }} -o ${{ variables.ArtifactStagingDirectory }} /p:PackageVersion=${{ parameters.Tag }} /p:GenerateDocumentationFile=true
              } else {
                dotnet pack --no-build -o ${{ variables.ArtifactStagingDirectory }} /p:GenerateDocumentationFile=true --include-symbols
              }
            failOnStderr: true
            workingDirectory: ./src/Xabe.FFmpeg
            displayName: 'Dotnet pack'
          - powershell: |
              dotnet clean -c ${{ variables.BuildConfiguration }}
              if (${{ parameters.Tag }}) {
                dotnet build -c ${{ variables.BuildConfiguration }} -p:Version=${{ parameters.Tag }} /p:GenerateDocumentationFile=true
              } else {
                dotnet build /p:GenerateDocumentationFile=true
              }
            failOnStderr: true
            workingDirectory: ./src/Xabe.FFmpeg.Downloader
            displayName: 'Dotnet build downloader'
          - powershell: |
              if (${{ parameters.Tag }}) {
                dotnet pack --no-build -c ${{ variables.BuildConfiguration }} -o ${{ variables.ArtifactStagingDirectory }} /p:PackageVersion=${{ parameters.Tag }} /p:GenerateDocumentationFile=true
              } else {
                dotnet pack --no-build -o ${{ variables.ArtifactStagingDirectory }} /p:GenerateDocumentationFile=true --include-symbols
              }
            failOnStderr: true
            workingDirectory: ./src/Xabe.FFmpeg.Downloader
            displayName: 'Dotnet pack downloader'
          - publish: ${{ variables.ArtifactStagingDirectory }}
            artifact: '${{ variables.ArtifactName }}'


  - stage: test_release
    displayName: "Deploy to test feed"
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - job:
        displayName: Realease to test feed
        steps:
          - download: current
          - task: UseDotNet@2
            displayName: 'Set .NET Core to 3.1'
            inputs:
              packageType: sdk
              version: 3.1.x
              installationPath: $(Agent.ToolsDirectory)/dotnet
          - task: DotNetCoreCLI@2
            displayName: 'dotnet push'
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/${{ variables.ArtifactName }}/Xabe.FFmpeg.*.nupkg'
              publishVstsFeed: 'f3a8b4d1-7ce4-4c40-9082-08c3837e956f/71024cca-1bc3-4497-b7a5-2463315f77c5'
            
  - stage: prod_release
    displayName: "Deploy to NuGet"
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - job:
        steps:
          - download: current
          - task: UseDotNet@2
            displayName: 'Set .NET Core to 3.1'
            inputs:
              packageType: sdk
              version: 3.1.x
              installationPath: $(Agent.ToolsDirectory)/dotnet
          # - task: DotNetCoreCLI@2
          #   displayName: 'dotnet push'
          #   inputs:
          #     command: push
          #     packagesToPush: '$(System.DefaultWorkingDirectory)/_ffmpeg/drop/*.nupkg'
          #     nuGetFeedType: external
          #     publishFeedCredentials: 'Xabe.FFmpeg prod'